lol  = c("Code", 'City', rep(2004:2022, each=1), rep(2004:2022, each=1))
lol
gdp_data <- read_xls("DataSets/GpdPerCapita.xls", range = cell_rows(4:86))
gdp_data <- gdp_data[, colSums(gdp_data != "") != 0]
View(gpd_data)
View(gdp_data)
gdp_data <- gdp_data[, colSums(gdp_data != "") != 0]
gdp_data <- gdp_data[!sapply(gdp_data, function(x) all(x == ""))]
lol = colSums(is.na(gpd_data))
lol
gdp_data <- colSums(is.na(gdp_data)) < nrow(gdp_data)
gdp_data <- read_xls("DataSets/GpdPerCapita.xls", range = cell_rows(4:86))
gdp_data <- gdp_data[colSums(is.na(gdp_data)) < nrow(gdp_data)]
View(gdp_data)
colnames(gdp_data) = c("Code", 'City', rep(2004:2022, each=1), rep(2004:2022, each=1))
library("dplyr")
library("readxl")
library("ggplot2")
library("tidyr")
library("plyr")
library("sf")
library('treemap')
library('plotly')
## GENERAL DEFINE SECTION
list_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
list_season = c(rep("Winter",times=3),rep("Spring",times=3),rep("Summer",times=3),rep("Autumn",times=3))
##### DATA CLEANING SECTION #####
### Province Data Cleaning
province_data <- read_excel("DataSets/ForeignHouseSellBasedonProvince.xls", range = cell_rows(3:135))
# Change the columns names
colnames(province_data)  = c("Year", "City", "Total",list_months)
# Replace the CITY columns value's Turkish onces
province_data$City <- sub(".*- ", "", province_data$City)
# Fill the year columns to get rid of the empty values
province_data|>
mutate(Year = rep(2013:2023, each=12)) -> province_data
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ]
# !!! Change the data shape to transform it into long format
province_data |>
gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data_long_version
province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% "Total"]
province_data_long_version |>
mutate(
Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)
) -> province_data_long_version
province_data_long_version <- na.omit(province_data_long_version)
### Sales Data Cleaning
sales_data <- read_excel("DataSets/ForeginHouseSellPercentage.xls", range = cell_rows(3:143))
# Change the columns names
colnames(sales_data) = c('Year','Month','Total','Foreigners_Sales','Percentage')
# Little Function Define
cleanFunction = function(val){
if(val > 500000){
return(FALSE)
}
else{
return(TRUE)
}
}
# Create the fD1lter to useles values
lapply(sales_data$Total, cleanFunction) -> filterList
# Apply the our filter into our function
sales_data|>filter(unlist(filterList)) -> sales_data
# Replace the CITY columns value's Turkish onces
sales_data$Month <- sub(".*- ", "", sales_data$Month)
# Fill the empty year values on our data set
sales_data|>
mutate(
Year = c(rep(2013:2022, each=12),rep(2023,each=9)),
Season = mapvalues(sales_data$Month, from=list_months, to=list_season)
) -> sales_data
### Nationality Data Cleaning
nationality_data <- read_xls("DataSets/ForeingHouseSellBasedNationality.xls", range = cell_rows(3:201))
# Change the columns names
colnames(nationality_data) = c("Year","Country", "Total",list_months)
# Replace the CITY columns value's Turkish onces
nationality_data$Country <- sub(".*- ", "", nationality_data$Country)
nationality_data$Country <- sub(".*-", "", nationality_data$Country)
# Fill the year columns to get rid of the empty values
nationality_data|>
mutate(Year = rep(2015:2023, each=22)) -> nationality_data
# Drop the " Total " values inside the CITY columns
nationality_data <- nationality_data[!(nationality_data$Country == "Total"), ]
# !!! Change the data shape to transform it into long format
nationality_data |>
gather(key = "Month", value = "Value", -c(Year, Country, Total)) -> nationality_data_long_version
nationality_data_long_version <- nationality_data_long_version[, !names(nationality_data_long_version) %in% "Total"]
nationality_data_long_version <- na.omit(nationality_data_long_version)
### GPD Data Cleaning
gdp_data <- read_xls("DataSets/GpdPerCapita.xls", range = cell_rows(4:86))
gdp_data <- gdp_data[colSums(is.na(gdp_data)) < nrow(gdp_data)]
colnames(gdp_data) = c("Code", 'City', rep(2004:2022, each=1), rep(2004:2022, each=1))
View(gdp_data)
View(sales_data)
View(province_data_long_version)
View(province_data_long_version)
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = sum(Value))
View(map_raw_data)
View(map_raw_data)
library("dplyr")
library("readxl")
library("ggplot2")
library("tidyr")
library("plyr")
library("sf")
library('treemap')
library('plotly')
## GENERAL DEFINE SECTION
list_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
list_season = c(rep("Winter",times=3),rep("Spring",times=3),rep("Summer",times=3),rep("Autumn",times=3))
### Province Data Cleaning
province_data <- read_excel("DataSets/ForeignHouseSellBasedonProvince.xls", range = cell_rows(3:135))
# Change the columns names
colnames(province_data)  = c("Year", "City", "Total",list_months)
# Replace the CITY columns value's Turkish onces
province_data$City <- sub(".*- ", "", province_data$City)
View(cleanFunction)
View(province_data)
View(province_data)
province_data|>
mutate(Year = rep(2013:2023, each=12)) -> province_data
province_data <- province_data[!(province_data$City == "Total"), ]
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ][!(province_data$City == "Other provinces
"), ]
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ][!(province_data$City == "Other provinces"), ]
# !!! Change the data shape to transform it into long format
province_data |>
gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data_long_version
province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% "Total"]
province_data_long_version |>
mutate(
Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)
) -> province_data_long_version
province_data$City <- sub(".*- ", "", province_data$City)
province_data_long_version <- na.omit(province_data_long_version)
View(nationality_data_long_version)
View(province_data_long_version)
turkey_map <- st_read("MapJson/tr-cities.json")
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = mean(Value))
map_data <- merge(turkey_map, map_raw_data, by.x = 'name', by.y = 'City', all.x= TRUE)
# Optional for lego grid ::::  map_data <- replace(map_data, is.na(map_data), 0)
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
turkey_map <- st_read("MapJson/tr-cities.json")
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = mean(Value))
map_data <- merge(turkey_map, map_raw_data, by.x = 'name', by.y = 'City', all.x= TRUE)
# Optional for lego grid ::::  map_data <- replace(map_data, is.na(map_data), 0)
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
+
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = mean(Value))
View(map_raw_data)
map_data <- merge(turkey_map, map_raw_data, by.x = 'name', by.y = 'City', all.x= TRUE)
View(map_data)
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
ggplot(map_data, aes(fill = sales)) +
geom_sf() +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
View(nationality_data)
View(province_data)
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = mean(Value))
clean<- map_raw_data |>
mutate(clases=case_when(
sales<150~"1",
sales<300~"2",
sales<450~"3",
sales<600~"4",
sales<750~"5",
sales<900~"6",
sales>900~"7",
))
View(map_raw_data)
map_raw_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = mean(Value))
map_raw_data <- map_raw_data |>
mutate(clases=case_when(
sales<150~"1",
sales<300~"2",
sales<450~"3",
sales<600~"4",
sales<750~"5",
sales<900~"6",
sales>900~"7",
))
View(map_raw_data)
z = c(1,4,72,3,6,22,17)
z_gr = cut(z, breaks = c(1,10,20,72),
labels = c("1-10", "11-20", "21-72"),
include.lowest=TRUE)
cbind(z, z_gr)
z = c(1,4,72,3,6,22,17)
z_gr = cut(z, breaks = c(1,10,20,72),
labels = c("1-10", "11-20", "21-72"),
include.lowest=TRUE)
z_gr
z_gr = cut(map_raw_data$sales, breaks = c(60,70,80,90,100,110,120,130,140,150,170),
include.lowest=TRUE)
z_gr
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
library(rjson)
install.packages('rjson')
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
library(rjson)
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
View(counties)
View(turkey_map)
View(counties)
counties <- rjson::fromJSON(file="MapJson/tr-cities.json")
View(counties)
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
View(g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
fig <- plot_ly()
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
geo = g
)
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=counties,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('black')
)
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=counties,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
counties <- rjson::fromJSON(file='MapJson/tr-cities.json')
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
g <- list(
scope = 'tr',
projection = list(type = 'tr'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig |>
add_trace( type="choropleth", geojson=counties,
locations=map_raw_data$City,
z=map_raw_data$sales,
colorscale="Viridis",
marker=list(line=list(width=0)
)
)
fig <- fig |> colorbar(title = "Unemployment Rate (%)")
fig <- fig |> layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
counties <- rjson::fromJSON(file='MapJson/tr-cities.json')
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
g <- list(
scope = 'tr',
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig |>
add_trace( type="choropleth", geojson=counties,
locations=map_raw_data$City,
z=map_raw_data$sales,
colorscale="Viridis",
marker=list(line=list(width=0)
)
)
fig <- fig |> colorbar(title = "Unemployment Rate (%)")
fig <- fig |> layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
g <- list(
scope = 'TUR',
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_ly()
fig <- fig |>
add_trace( type="choropleth", geojson=counties,
locations=map_raw_data$City,
z=map_raw_data$sales,
colorscale="Viridis",
marker=list(line=list(width=0)
)
)
fig <- fig |> colorbar(title = "Unemployment Rate (%)")
fig <- fig |> layout(
title = "2016 US Unemployment by County"
)
fig <- fig %>% layout(
geo = g
)
fig
fig <- plot_ly()
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
url2<- "https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv"
df <- read.csv(url2, colClasses=c(fips="character"))
fig <- plot_ly()
fig <- fig |> add_trace(
type="choropleth",
geojson=counties,
locations=df$fips,
z=df$unemp,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig |> colorbar(title = "Unemployment Rate (%)")
fig <- fig |> layout(
title = "2016 US Unemployment by County"
)
fig <- fig |> layout(
geo = g
)
fig
View(map_data)
View(map_raw_data)
temp_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = `mean`(Value))
fig <- plot_ly(labels = temp_data$City, values = temp_data$sales, type = 'pie')
fig <- fig |>
layout(title = 'House sales based City ',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
fig <- plot_ly(
labels = temp_data$City,
values = temp_data$sales,
type = 'pie',
marker = list(colors = colors, line = list(color = '#FFFFFF', width = 1)),
showlegend = FALSE)
fig <- fig |>
layout(title = 'House sales based City ',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
fig <- plot_ly(
labels = temp_data$City,
values = temp_data$sales,
type = 'pie',
hoverinfo = 'text',
marker = list(colors = colors, line = list(color = '#FFFFFF', width = 1)),
showlegend = FALSE)
fig <- fig |>
layout(title = 'House sales based City ',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
fig <- plot_ly(
labels = temp_data$City,
values = temp_data$sales,
type = 'pie')
fig <- fig |>
layout(title = 'House sales based City ',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
View(nationality_data)
View(province_data)
View(sales_data)
world_map <- st_read("MapJson/world-map.json")
map_data <- merge(world_map, nationality_data_long_version ,
by.x = 'name', by.y = 'Country', all.x= TRUE)
map_data <- replace(map_data, is.na(map_data), 0)
ggplot(map_data, aes(fill = Value))+
geom_sf()+
labs(title = "Foreigns House Sell Heat Map",
subtitle = "Color represents amount of Sales",
fill = "House Sales") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
temp_data <- province_data_long_version |> group_by(City) |> dplyr::summarise(sales = `mean`(Value))
fig <- plot_ly(
labels = temp_data$City,
values = temp_data$sales,
type = 'pie')
fig <- fig |>
layout(title = 'House Sales Based City ',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
View(nationality_data)
