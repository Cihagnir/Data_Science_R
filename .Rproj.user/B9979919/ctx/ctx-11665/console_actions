{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.3.1 (2023-06-16 ucrt) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from C:/Users/cihan/Desktop/Projeler/DataSci/R_HomeWork/.RData]\r\n\r\n\nRestarting R session...\n\n",
        "> ",
        "library(\"dplyr\")",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "library(\"readxl\")",
        "> ",
        "library(\"ggplot2\")",
        "Warning message:\n",
        "package ‘ggplot2’ was built under R version 4.3.2 \n",
        "> ",
        "library(\"tidyr\")",
        "Warning message:\n",
        "package ‘tidyr’ was built under R version 4.3.2 \n",
        "> ",
        "library(\"plyr\")",
        "---------------------------------------------------------------------------------------------------------------\n",
        "You have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n",
        "---------------------------------------------------------------------------------------------------------------\n",
        "\nAttaching package: ‘plyr’\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise, summarize\n\n",
        "Warning message:\n",
        "package ‘plyr’ was built under R version 4.3.2 \n",
        "> ",
        "library(\"sf\")",
        "Linking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n",
        "Warning message:\n",
        "package ‘sf’ was built under R version 4.3.2 \n",
        "> ",
        "",
        "> ",
        "## GENERAL DEFINE SECTION ",
        "> ",
        "",
        "> ",
        "list_months = c(\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\")",
        "> ",
        "list_season = c(rep(\"Winter\",times=3),rep(\"Spring\",times=3),rep(\"Summer\",times=3),rep(\"Autumn\",times=3))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "## DATA CLEANING SECTION ",
        "> ",
        "",
        "> ",
        "### Province Data Cleaning ",
        "> ",
        "province_data <- read_excel(\"ForeignHouseSellBasedonProvince.xls\", range = cell_rows(3:135))",
        "\u001B[1m\u001B[22mNew names:\n\u001B[36m•\u001B[39m `` -> `...2`\n",
        "> ",
        "",
        "> ",
        "  # Change the columns names ",
        "> ",
        "colnames(province_data)  = c(\"Year\", \"City\", \"Total\",list_months)",
        "> ",
        "  ",
        "> ",
        "  # Replace the CITY columns value's Turkish onces",
        "> ",
        "province_data$City <- sub(\".*- \", \"\", province_data$City)",
        "> ",
        "",
        "> ",
        "  # Fill the year columns to get rid of the empty values",
        "> ",
        "province_data|>",
        "+ ",
        "  mutate(Year = rep(2013:2023, each=12)) -> province_data",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "  # Drop the \" Total \" values inside the CITY columns",
        "> ",
        "province_data <- province_data[!(province_data$City == \"Total\"), ]",
        "> ",
        "",
        "> ",
        "  # !!! Change the data shape to transform it into long format ",
        "> ",
        "province_data |>",
        "+ ",
        "  gather(key = \"Month\", value = \"Value\", -c(Year, City, Total)) -> province_data_long_version",
        "> ",
        "",
        "> ",
        "province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% \"Total\"]",
        "> ",
        "",
        "> ",
        "province_data_long_version |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)",
        "+ ",
        "  ) -> province_data_long_version",
        "> ",
        "",
        "> ",
        "province_data_long_version <- na.omit(province_data_long_version)",
        "> ",
        "## Map Graph",
        "> ",
        "turkey_map <- st_read(\"tr-cities.json\")",
        "Reading layer `tr-cities' from data source `C:\\Users\\cihan\\Desktop\\Projeler\\DataSci\\R_HomeWork\\tr-cities.json' using driver `GeoJSON'\nSimple feature collection with 81 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66514 ymin: 35.81543 xmax: 44.83384 ymax: 42.10541\nGeodetic CRS:  WGS 84\n",
        "> ",
        "",
        "> ",
        "map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)",
        "> ",
        "map_data <- replace(map_data, is.na(map_data), 0)",
        "> ",
        "",
        "> ",
        "custom_theme <- theme_void()+",
        "+ ",
        "  theme(",
        "+ ",
        "    plot.margin = margin(1,1,10,1,\"pt\"),",
        "+ ",
        "    plot.background = element_rect(fill=\"#001219\",color=NA),",
        "+ ",
        "    legend.position = \"bottom\",",
        "+ ",
        "    legend.title = element_text(hjust=0.5,color=\"white\",face=\"bold\"),",
        "+ ",
        "    legend.text = element_text(color=\"white\"),",
        "+ ",
        "    plot.title = element_text(color = \"white\"),",
        "+ ",
        "    plot.subtitle = element_text(color = \"white\")",
        "+ ",
        "  )",
        "> ",
        "# Make grid",
        "> ",
        "map_grid <- st_make_grid(",
        "+ ",
        "  map_data, # map name ",
        "+ ",
        "  n = c(60,60) # number of cells per longitude/latitude ",
        "+ ",
        "    )|>",
        "+ ",
        "  # convert back to sf object",
        "+ ",
        "  st_sf()",
        "> ",
        "",
        "> ",
        "# Extract centroids",
        "> ",
        "centroid <- map_grid |> st_centroid()",
        "> ",
        "# Intersect centroids with basemap",
        "> ",
        "centroid_clean <- centroid |>",
        "+ ",
        "  st_intersection(map_data)",
        "Warning message:\n",
        "attribute variables are assumed to be spatially constant throughout all geometries \n",
        "> ",
        "",
        "> ",
        "# Make a centroid without geom",
        "> ",
        "# (convert from sf object to tibble)",
        "> ",
        "centroid_no_geom <- centroid_clean |>",
        "+ ",
        "  st_drop_geometry()",
        "> ",
        "",
        "> ",
        "# Join with grid thanks to id column",
        "> ",
        "map_grid_clean <- map_grid |>",
        "+ ",
        "  left_join(centroid_no_geom)",
        "\u001B[1m\u001B[33mError\u001B[39m in `sf_column %in% names(g)`:\u001B[22m\n\u001B[1m\u001B[22m\u001B[33m!\u001B[39m `by` must be supplied when `x` and `y` have no\n  common variables.\n\u001B[36mℹ\u001B[39m Use `cross_join()` to perform a cross-join.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "# Join with grid thanks to id column",
        "> ",
        "map_grid_clean <- map_grid |>",
        "+ ",
        "  cross_join(centroid_no_geom)",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(",
        "+ ",
        "    map_grid_clean |> drop_na(), ",
        "+ ",
        "    mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..,fill=clss)",
        "+ ",
        "  )+",
        "+ ",
        "  geom_sf(centroid_clean,mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..),fill=NA,pch=21,size=0.5)+",
        "+ ",
        "  labs(title = \"Seasonal Distribution of House Sales in Turkish Cities\",",
        "+ ",
        "       subtitle = \"Color represents the most dominant season of sales\",",
        "+ ",
        "       fill = \"Season Color Scale\") +   ",
        "+ ",
        "  guides(fill=guide_legend( nrow=1, title.position=\"top\", label.position=\"bottom\" )) +",
        "+ ",
        "  theme_custom",
        "Error: object 'theme_custom' not found\n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(",
        "+ ",
        "    map_grid_clean |> drop_na(), ",
        "+ ",
        "    mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..,fill=clss)",
        "+ ",
        "  )+",
        "+ ",
        "  geom_sf(centroid_clean,mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..),fill=NA,pch=21,size=0.5)+",
        "+ ",
        "  labs(title = \"Seasonal Distribution of House Sales in Turkish Cities\",",
        "+ ",
        "       subtitle = \"Color represents the most dominant season of sales\",",
        "+ ",
        "       fill = \"Season Color Scale\") +   ",
        "+ ",
        "  guides(fill=guide_legend( nrow=1, title.position=\"top\", label.position=\"bottom\" )) +",
        "+ ",
        "  custom_theme",
        "\nRestarting R session...\n\n"
    ]
}