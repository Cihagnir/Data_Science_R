guides(
fill=guide_legend(
nrow=1,
title.position="top",
label.position="bottom"
)
)+
theme_custom
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange", )) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season",
col= "white") +
guides(
fill=guide_legend(
nrow=1,
title.position="top",
label.position="bottom"
)
)+
theme_custom
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season",
col= "white") +
guides(
fill=guide_legend(
nrow=1,
title.position="top",
label.position="bottom"
)
)+
theme_custom
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season",
fill= "white") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
turkey_map <- st_read("tr-cities.json")
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season",
fill= "white") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white")
plot.title = element_text(color = "white")
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white")
)
ggplot(map_data, aes(fill = Season)) +
geom_sf() +
scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
# Make grid
map_grid<-st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()%>%
# add a unique id to each cell
# (will be useful later to get back centroids data)
mutate(id=row_number())
# Make grid
map_grid<-st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()|>
mutate(id=row_number())
# Make grid
map_grid <- st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)
View(map_grid)
View(turkey_map)
dummy_map<-sf::read_sf('https://github.com/BjnNowak/lego_map/raw/main/data/france_sport.gpkg')
View(dummy_map)
View(dummy_map)
View(dummy_map)
View(dummy_map)
View(dummy_map)
View(turkey_map)
# Make grid
map_grid <- st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()
mutate(id=row_number())
# Make grid
map_grid <- st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()|>
mutate(id=row_number())
dummy_map<-sf::read_sf('https://github.com/BjnNowak/lego_map/raw/main/data/france_sport.gpkg')
# Create classes
clean<-map%>%
mutate(clss=case_when(
value<18~"1",
value<20~"2",
value<22~"3",
value<24~"4",
value<26~"5",
TRUE~"6"
))
map<-sf::read_sf('https://github.com/BjnNowak/lego_map/raw/main/data/france_sport.gpkg')
# Create classes
clean<-map%>%
mutate(clss=case_when(
value<18~"1",
value<20~"2",
value<22~"3",
value<24~"4",
value<26~"5",
TRUE~"6"
))
# Set color palette
pal <- c("#bb3e03","#ee9b00","#e9d8a6","#94d2bd","#0a9396","#005f73")
# Set color background
bck <- "#001219"
# Set theme
theme_custom <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill=bck,color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white")
)
# Make choropleth
ggplot(clean, aes(fill=clss))+
geom_sf()+
labs(fill="Member of a sport association")+
guides(
fill=guide_legend(
nrow=1,
title.position="top",
label.position="bottom"
)
)+
scale_fill_manual(
values=pal,
label=c("< 18 %","< 20 %","< 22 %","< 24 %","< 26 %", "≥ 26 %")
)+
theme_custom
grd<-st_make_grid(
clean, # map name
n = c(60,60) # number of cells per longitude/latitude
)%>%
# convert back to sf object
st_sf()%>%
# add a unique id to each cell
# (will be useful later to get back centroids data)
mutate(id=row_number())
grd<-st_make_grid(
clean, # map name
n = c(60,60) # number of cells per longitude/latitude
)%>%
# convert back to sf object
st_sf()
# Extract centroids
cent<-grd%>%
st_centroid()
# Take a look at the results
ggplot()+
geom_sf(grd,mapping=aes(geometry=geometry))+
geom_sf(cent,mapping=aes(geometry=geometry),pch=21,size=0.5)+
theme_void()
# Make grid
map_grid <- st_make_grid(
turkey_map, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()
# Extract centroids
cent <- map_grid |> st_centroid()
# Take a look at the results
ggplot()+
geom_sf(map_grid,mapping=aes(geometry=geometry))+
geom_sf(cent,mapping=aes(geometry=geometry),pch=21,size=0.5)+
theme_void()
grd<-st_make_grid(
clean, # map name
n = c(60,60) # number of cells per longitude/latitude
)%>%
# convert back to sf object
st_sf()
map<-sf::read_sf('https://github.com/BjnNowak/lego_map/raw/main/data/france_sport.gpkg')
# Create classes
clean<-map%>%
mutate(clss=case_when(
value<18~"1",
value<20~"2",
value<22~"3",
value<24~"4",
value<26~"5",
TRUE~"6"
))
# Set color palette
pal <- c("#bb3e03","#ee9b00","#e9d8a6","#94d2bd","#0a9396","#005f73")
# Set color background
bck <- "#001219"
# Set theme
theme_custom <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill=bck,color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white")
)
# Make choropleth
ggplot(clean, aes(fill=clss))+
geom_sf()+
labs(fill="Member of a sport association")+
guides(
fill=guide_legend(
nrow=1,
title.position="top",
label.position="bottom"
)
)+
scale_fill_manual(
values=pal,
label=c("< 18 %","< 20 %","< 22 %","< 24 %","< 26 %", "≥ 26 %")
)+
theme_custom
grd<-st_make_grid(
clean, # map name
n = c(60,60) # number of cells per longitude/latitude
)%>%
# convert back to sf object
st_sf()
# Extract centroids
cent<-grd%>%
st_centroid()
# Take a look at the results
ggplot()+
geom_sf(grd,mapping=aes(geometry=geometry))+
geom_sf(cent,mapping=aes(geometry=geometry),pch=21,size=0.5)+
theme_void()
View(clean)
View(grd)
turkey_map <- st_read("tr-cities.json")
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)
View(map)
View(turkey_map)
View(clean)
View(turkey_map)
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)
library("dplyr")
library("readxl")
library("ggplot2")
library("tidyr")
library("plyr")
library("sf")
## GENERAL DEFINE SECTION
list_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
list_season = c(rep("Winter",times=3),rep("Spring",times=3),rep("Summer",times=3),rep("Autumn",times=3))
## DATA CLEANING SECTION
### Province Data Cleaning
province_data <- read_excel("ForeignHouseSellBasedonProvince.xls", range = cell_rows(3:135))
# Change the columns names
colnames(province_data)  = c("Year", "City", "Total",list_months)
# Replace the CITY columns value's Turkish onces
province_data$City <- sub(".*- ", "", province_data$City)
# Fill the year columns to get rid of the empty values
province_data|>
mutate(Year = rep(2013:2023, each=12)) -> province_data
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ]
# !!! Change the data shape to transform it into long format
province_data |>
gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data_long_version
province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% "Total"]
province_data_long_version |>
mutate(
Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)
) -> province_data_long_version
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)
View(map_data)
View(clean)
map_grid <- st_make_grid(
map_data, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()
View(map_grid)
View(grd)
View(turkey_map)
View(map_data)
View(map_data)
View(clean)
View(turkey_map)
View(map_data)
View(grd)
View(map_grid)
View(map_grid)
turkey_map <- st_read("tr-cities.json")
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry)
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry) |>
filter(-geometry)
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry) |>
select(-geometry)
View(map_data)
View(map_data)
View(map_data)
View(map_data)
library("dplyr")
library("readxl")
library("ggplot2")
library("tidyr")
library("plyr")
library("sf")
## GENERAL DEFINE SECTION
list_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
list_season = c(rep("Winter",times=3),rep("Spring",times=3),rep("Summer",times=3),rep("Autumn",times=3))
## DATA CLEANING SECTION
### Province Data Cleaning
province_data <- read_excel("ForeignHouseSellBasedonProvince.xls", range = cell_rows(3:135))
# Change the columns names
colnames(province_data)  = c("Year", "City", "Total",list_months)
# Replace the CITY columns value's Turkish onces
province_data$City <- sub(".*- ", "", province_data$City)
# Fill the year columns to get rid of the empty values
province_data|>
mutate(Year = rep(2013:2023, each=12)) -> province_data
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ]
# !!! Change the data shape to transform it into long format
province_data |>
gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data_long_version
province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% "Total"]
province_data_long_version |>
mutate(
Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)
) -> province_data_long_version
turkey_map <- st_read("tr-cities.json")
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry) |>
select(-geometry)
View(map_data)
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry) |>
select(-geometry)
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)|>
mutate(geom = geometry) |>
select(-c(geometry))
library("dplyr")
library("readxl")
library("ggplot2")
library("tidyr")
library("plyr")
library("sf")
## GENERAL DEFINE SECTION
list_months = c("January","February","March","April","May","June","July","August","September","October","November","December")
list_season = c(rep("Winter",times=3),rep("Spring",times=3),rep("Summer",times=3),rep("Autumn",times=3))
## DATA CLEANING SECTION
### Province Data Cleaning
province_data <- read_excel("ForeignHouseSellBasedonProvince.xls", range = cell_rows(3:135))
# Change the columns names
colnames(province_data)  = c("Year", "City", "Total",list_months)
# Replace the CITY columns value's Turkish onces
province_data$City <- sub(".*- ", "", province_data$City)
# Fill the year columns to get rid of the empty values
province_data|>
mutate(Year = rep(2013:2023, each=12)) -> province_data
# Drop the " Total " values inside the CITY columns
province_data <- province_data[!(province_data$City == "Total"), ]
# !!! Change the data shape to transform it into long format
province_data |>
gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data_long_version
province_data_long_version <- province_data_long_version[, !names(province_data_long_version) %in% "Total"]
province_data_long_version |>
mutate(
Season = mapvalues(province_data_long_version$Month, from=list_months, to=list_season)
) -> province_data_long_version
province_data_long_version <- na.omit(province_data_long_version)
## Map Graph
turkey_map <- st_read("tr-cities.json")
map_data <- merge(turkey_map, province_data_long_version, by.x = 'name', by.y = 'City', all.x= TRUE)
map_data <- replace(map_data, is.na(map_data), 0)
custom_theme <- theme_void()+
theme(
plot.margin = margin(1,1,10,1,"pt"),
plot.background = element_rect(fill="#001219",color=NA),
legend.position = "bottom",
legend.title = element_text(hjust=0.5,color="white",face="bold"),
legend.text = element_text(color="white"),
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white")
)
# Make grid
map_grid <- st_make_grid(
map_data, # map name
n = c(60,60) # number of cells per longitude/latitude
)|>
# convert back to sf object
st_sf()
# Extract centroids
centroid <- map_grid |> st_centroid()
# Intersect centroids with basemap
centroid_clean <- centroid |>
st_intersection(map_data)
# Make a centroid without geom
# (convert from sf object to tibble)
centroid_no_geom <- centroid_clean |>
st_drop_geometry()
# Join with grid thanks to id column
map_grid_clean <- map_grid |>
left_join(centroid_no_geom)
# Join with grid thanks to id column
map_grid_clean <- map_grid |>
cross_join(centroid_no_geom)
ggplot() +
geom_sf(
map_grid_clean |> drop_na(),
mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..,fill=clss)
)+
geom_sf(centroid_clean,mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..),fill=NA,pch=21,size=0.5)+
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
theme_custom
ggplot() +
geom_sf(
map_grid_clean |> drop_na(),
mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..,fill=clss)
)+
geom_sf(centroid_clean,mapping=aes(geometry=st_make_grid.map_data..n...c.60..60..),fill=NA,pch=21,size=0.5)+
labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
subtitle = "Color represents the most dominant season of sales",
fill = "Season Color Scale") +
guides(fill=guide_legend( nrow=1, title.position="top", label.position="bottom" )) +
custom_theme
