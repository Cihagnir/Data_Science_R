library("dplyr")
library("readxl")
library(ggplot2)
library(tidyr)

#setwd("/Users/durud/Desktop/RProject")

# Data Cleaning
provinceData <- read_excel("ForeignHouseSellBasedonProvince2.xls", range = cell_rows(3:135))
provinceData

provinceData|>
  mutate(Year = rep(2013:2023, each=12)) -> provinceData

salesData <- read_excel("ForeginHouseSellPercentage.xls", range = cell_rows(3:143))
salesData

salesData|> 
  rename(
    "Year" = "Yıl                        Year",
    "Month" = "Ay\nMonth",
    "Total" = "Toplam\nTotal",
    "Foreigners_Sales"= "Yabancılara yapılan satışlar\nSales to foreigners",
    "Percentage" = "Pay \nShare (%)"
  ) -> salesData

cleanFunction = function(val){
  
  if(val > 500000){
    return(FALSE)
  }
  else{
    return(TRUE)
  }
}

lapply(salesData$Total, cleanFunction) -> filterList

salesData|>filter(unlist(filterList)) -> salesData

salesData|>
  mutate(Year = c(rep(2013:2022, each=12),rep(2023,each=9))) -> salesData


nationalityData <- read_xls("ForeingHouseSellBasedNationality.xls", range = cell_rows(3:201))
names(nationalityData)

nationalityData|>
  mutate(Year = rep(2015:2023, each=22)) -> nationalityData


# Rename Months and Cities
salesData$Month <- sub(".*- ", "", salesData$Month)
provinceData$City <- sub(".*- ", "", provinceData$City)
nationalityData$City <- sub(".*- ", "", nationalityData$City)
nationalityData$City <- sub(".*-", "", nationalityData$City)

# Delete total rows
nationalityData <- nationalityData[!(nationalityData$City == "Total"), ]
provinceData <- provinceData[!(provinceData$City == "Total"), ]

# Merge months and delete total columns
provinceData |>
  gather(key = "Month", value = "Value", -c(Year, City, Total)) -> province_data
province_data <- province_data[, !names(province_data) %in% "Total"]

nationalityData |>
  gather(key = "Month", value = "Value", -c(Year, City, Total)) -> nationality_data
nationality_data <- nationality_data[, !names(nationality_data) %in% "Total"]

View(nationality_data)
View(province_data)
View(salesData)

nationality_data <- rename(nationality_data, Country = City)

install.packages("sf")

library("sf")
library(ggplot2)


merged_data <- merge(nationality_data, province_data, by = c("Year", "Month"), suffixes = c("_country", "_city"))

# Merge merged_data with salesData
final_data <- merge(merged_data, salesData, by = c("Year", "Month"))


View(map_data)
View(final_data)
View(nationality_data)

#################


merged_data <- merge(nationality_data, province_data, by = c("Year", "Month"), suffixes = c("_country", "_city"))
final_data <- merge(merged_data, salesData, by = c("Year", "Month"))

# Define a function to convert month names to seasons
month_to_season <- function(month_name) {
  month_name <- tolower(month_name)
  if (month_name %in% c("December", "January", "February")) {
    return("Winter")
  } else if (month_name %in% c("March", "April", "May")) {
    return("Spring")
  } else if (month_name %in% c("June", "July", "August")) {
    return("Summer")
  } else if (month_name %in% c("September", "October", "November")) {
    return("Autumn")
  } else {
    return("Unknown")
  }
}

# Create a new column 'Season' based on the month and year
final_data$Season <- sapply(final_data$Month, month_to_season)

turkey_map <- st_read("/Users/durud/Desktop/RProject/tr-cities.json")
map_data <- merge(turkey_map, final_data, by.x = "name", by.y = "City", all.x = TRUE)

ggplot(map_data, aes(fill = Season)) +
  geom_sf() +
  scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "red", "Autumn" = "orange")) +
  labs(title = "Seasonal Distribution of House Sales in Turkish Cities",
       subtitle = "Color represents the most dominant season of sales",
       fill = "Season") +
  theme_minimal()



























































